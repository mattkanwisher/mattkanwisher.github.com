<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthew Kanwisher's Blog]]></title>
  <link href="http://www.kanwisher.com/atom.xml" rel="self"/>
  <link href="http://www.kanwisher.com/"/>
  <updated>2012-07-20T14:33:19-04:00</updated>
  <id>http://www.kanwisher.com/</id>
  <author>
    <name><![CDATA[Matthew Kanwisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling blocking IO in GO]]></title>
    <link href="http://www.kanwisher.com/2012/07/19/handling-blocking-io-in-go/"/>
    <updated>2012-07-19T20:17:00-04:00</updated>
    <id>http://www.kanwisher.com/2012/07/19/handling-blocking-io-in-go</id>
    <content type="html"><![CDATA[<p>One of the most frustrating things when you start with go is that fact that IO is blocking. So for example today I needed to spawn a process and read the stdout, easy right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>  <span class="n">cmd</span> <span class="p">:=</span> <span class="n">exec</span><span class="p">.</span><span class="n">Command</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">,</span> <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp/matt.txt&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">StdoutPipe</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Ok here is the read</span>
</span><span class='line'>  <span class="n">reader</span> <span class="p">:=</span> <span class="n">bufio</span><span class="p">.</span><span class="n">NewReader</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="p">,</span><span class="n">err</span> <span class="p">:=</span> <span class="n">reader</span><span class="p">.</span><span class="n">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok thats great, but now the whole process waits while you read the io, which sucks if you have a server with lots of clients connecting.
So lets improve it a bit and make it a go routine so it doesn&#8217;t block at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">readLogData</span><span class="p">(</span><span class="n">filename</span> <span class="nb">string</span><span class="p">,</span> <span class="n">log_id</span> <span class="nb">int</span><span class="p">,</span> <span class="n">logOutputChan</span> <span class="k">chan</span><span class="p">&lt;-</span> <span class="p">*</span><span class="n">LogTuple</span><span class="p">,</span> <span class="n">deathChan</span> <span class="k">chan</span><span class="p">&lt;-</span> <span class="p">*</span><span class="nb">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="p">:=</span> <span class="n">exec</span><span class="p">.</span><span class="n">Command</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">,</span> <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="n">stdout</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">StdoutPipe</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">err</span>  <span class="p">=</span> <span class="n">nil</span>
</span><span class='line'>    <span class="n">reader</span> <span class="p">:=</span> <span class="n">bufio</span><span class="p">.</span><span class="n">NewReader</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sbuffer</span> <span class="p">:=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="p">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">;</span> <span class="n">err</span> <span class="p">==</span> <span class="n">nil</span><span class="p">;</span>  <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span><span class="p">,</span><span class="n">err</span> <span class="p">:=</span> <span class="n">reader</span><span class="p">.</span><span class="n">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sbuffer</span> <span class="p">+=</span> <span class="n">s</span>
</span><span class='line'>        <span class="n">lines</span> <span class="p">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">lines</span> <span class="p">&gt;</span> <span class="mi">5</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//|| time &gt; 1 min) {</span>
</span><span class='line'>            <span class="n">logOutputChan</span> <span class="p">&lt;-</span> <span class="p">&amp;</span><span class="n">LogTuple</span><span class="p">{</span> <span class="n">log_id</span><span class="p">,</span> <span class="n">sbuffer</span><span class="p">}</span>
</span><span class='line'>            <span class="n">sbuffer</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>            <span class="n">lines</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">deathChan</span> <span class="p">&lt;-</span> <span class="p">&amp;</span><span class="n">filename</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//SetFinalizer</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">go</span> <span class="n">readLogData</span><span class="p">(</span><span class="n">alog</span><span class="p">.</span><span class="n">Log</span><span class="p">.</span><span class="n">Path</span><span class="p">,</span> <span class="n">alog</span><span class="p">.</span><span class="n">Log</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">logOutputChan</span><span class="p">,</span> <span class="n">gorDeathChan</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A little bit more complicated, but lets explain it, so we broke this code into a seperate function that takes in 2 channels. Channels in go let you send data between go routines. We have one channel to get data from the go routine, and another that tells the goroutine to die. Why we need this? Cause there is no way to kill a goroutine safely.</p>

<p>First problem you might notice is that if the underlying IO blocks forever and never returns we can never end this go routine. When would this happen? A good example is &#8220;tail -f &#8221; or a process that has gone haywire and is not responding. So how do we fix this ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/exec&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cmd</span> <span class="p">:=</span> <span class="n">exec</span><span class="p">.</span><span class="n">Command</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">,</span> <span class="s">&quot;-f&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp/foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stdout</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">StdoutPipe</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ch</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quit</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">bool</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">buf</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nb">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">n</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">stdout</span><span class="p">.</span><span class="n">Read</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">n</span> <span class="p">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">ch</span> <span class="p">&lt;-</span> <span class="nb">string</span><span class="p">(</span><span class="n">buf</span><span class="p">[:</span><span class="n">n</span><span class="p">])</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;Goroutine finished&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">close</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">AfterFunc</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">Second</span><span class="p">,</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span> <span class="n">quit</span> <span class="p">&lt;-</span> <span class="n">true</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">loop</span><span class="p">:</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">s</span><span class="p">,</span> <span class="n">ok</span> <span class="p">:=</span> <span class="p">&lt;-</span><span class="n">ch</span><span class="p">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">!</span><span class="n">ok</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">break</span> <span class="n">loop</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">fmt</span><span class="p">.</span><span class="n">Print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">&lt;-</span><span class="n">quit</span><span class="p">:</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">Kill</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So basically we kill the underlying process so the IO sends an EOF. This is a simplified example. In my server I do keep track of when I want processes to die and spawn and its not on a simple timer.</p>

<p>Special thanks to mrlauer on the <a href="https://groups.google.com/forum/?fromgroups#!forum/golang-nuts">Golang-nuts</a> message board.</p>

<p>Shameless Plug:</p>

<p>At <a href="http://errplane.com">Errplane</a> we use Go to build a service for rails exception tracking, log aggregation and alerting / monitoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roasting marshmallows in a volcano in Guatemala]]></title>
    <link href="http://www.kanwisher.com/2010/04/02/volcano-marshmallow-roast/"/>
    <updated>2010-04-02T09:13:00-04:00</updated>
    <id>http://www.kanwisher.com/2010/04/02/volcano-marshmallow-roast</id>
    <content type="html"><![CDATA[<p>
    <object height="224" width="400">
    <param name="allowfullscreen" value="true">
    <param name="allowscriptaccess" value="always">
    <param name="movie" value="http://www.facebook.com/v/696401384107"><embed src="http://www.facebook.com/v/696401384107" type="application/x-shockwave-flash" height="224" width="400">
    </object>
</p>


<p>
    <object height="224" width="400">
    <param name="allowfullscreen" value="true">
    <param name="allowscriptaccess" value="always">
    <param name="movie" value="http://www.facebook.com/v/696416603607"><embed src="http://www.facebook.com/v/696416603607" type="application/x-shockwave-flash" height="224" width="400">
    </object>
</p>

]]></content>
  </entry>
  
</feed>
